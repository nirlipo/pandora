nameProgram = 'analysis'

agents = ['']
namespaceAgents = ['']
world = ''

srcFiles = Split('main.cxx')

import os, sys
from subprocess import call

sys.path.append('../../../scripts/')
import generateMpi 

release = ARGUMENTS.get('release', 1)
mareNostrum = ARGUMENTS.get('mn', 0)
extremeDebug = ARGUMENTS.get('edebug', 0)
useMpi = ARGUMENTS.get('mpi', 1)

if int(useMpi) == 1:
	env = Environment(ENV=os.environ, CXX='mpicxx')
else:
	env = Environment(ENV=os.environ, CXX='g++')
	
generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

linkFlags = Split('-fopenmp')
libs = Split('tinyxml pthread grass_gis grass_datetime')
if int(release) == 0:
	env['CCFLAGS'] = Split('-g -O0 -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libs += ['pandorad']
else:
	env['CCFLAGS'] = Split('-O3 -DTIXML_USE_STL -fopenmp')
	libs += ['pandora']

if int(useMpi)==1:
	env['CCFLAGS'] += ['-DPANDORAMPI']

includeDirs = Split('./ ../../../')

if int(mareNostrum)==1:		
	includeDirs += ['/apps/HDF5/1.8.10-mpi/OPENMPI/include']
	includeDirs += ['/apps/BOOST/1_52_0/include/']
	includeDirs += ['/apps/TINYXML/2.6.2/include']
	includeDirs += ['/apps/GDAL/1.9.2/include']
	includeDirs += ['/apps/GRASS/6.4.3RC2/grass-6.4.3RC2/include/']
	libs += ['hdf5','gdal','boost_filesystem','boost_system']
	libDirs = Split('../../../ /apps/HDF5/1.8.10-mpi/OPENMPI/lib /apps/GDAL/1.9.2/lib /apps/TINYXML/2.6.2/lib')
	libDirs += ['/apps/BOOST/1_52_0/lib/']
	libDirs += ['/apps/GRASS/6.4.3RC2/grass-6.4.3RC2/lib/']
else:
	includeDirs += ['/usr/lib/grass64/include/','/usr/include/gdal/']
	libDirs = ['../../../', '/usr/lib/grass64/lib/']

	if int(useMpi)==1:
		includeDirs += ['/usr/local/hdf5/include']
		libDirs += ['usr/local/hdf5/lib/']
	libs += ['mpl']

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:	
	if agent != '':
		agentsSrc.append(agent+".cxx")
		mpiAgentsSrc.append("mpiCode/"+agent+"_mpi.cxx")
env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends(world+'.hxx',mpiAgentsSrc)
env.Program(nameProgram, mpiAgentsSrc+srcFiles, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

